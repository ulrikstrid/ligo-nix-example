#import "./helpers/token.jsligo" "Token_helper"
#import "./helpers/dao.jsligo" "DAO_helper"
#import "./helpers/log.jsligo" "Log"
#import "./helpers/assert.jsligo" "Assert"
#import "./bootstrap/bootstrap.jsligo" "Bootstrap"
#import "../src/main.jsligo" "DAO"

const _ = Log.describe("[Propose] test suite");

// Boostrapping of the test environment
const initTokAmount = 10 as nat;
const bootstrap = () : [
    Token_helper.originated,
    DAO_helper.originated,
    address] => Bootstrap.boot(initTokAmount, DAO_helper.baseStorage);

// Successful proposal creation
const testSuccess = (() : unit => {
    const [tok, dao, sender_] = bootstrap();

    const r = DAO_helper.propose(DAO_helper.dummyProposal, dao.contr);
    Assert.txSuccess(r);

    const daoStorage = Test.get_storage(dao.taddr);
    const proposal = Option.unopt(daoStorage.proposal);
    assert(proposal.creator == sender_);
    assert(proposal.descriptionLink ==
        "ipfs://QmbKq7QriWWU74NSq35sDSgUf24bYWTgpBq3Lea7A3d7jU");
    assert(proposal.hash == Some(DAO_helper.dummyHash));

    Token_helper.assertBalanceAmount(
        tok.taddr,
        dao.addr,
        daoStorage.config.depositAmount
    );

    Token_helper.assertBalanceAmount(
        tok.taddr,
        sender_,
        abs(initTokAmount - daoStorage.config.depositAmount)
    );
})();

// Failing proposal creation because there is already a proposal
const testFailureProposalExists = (() : unit => {
    const [_, dao, _] = bootstrap();

    DAO_helper.proposeSuccess(DAO_helper.dummyProposal, dao.contr);
    const r = DAO_helper.propose(DAO_helper.dummyProposal, dao.contr);

    Assert.stringFailure(r, DAO.Errors.proposalAlreadyExists);
})();

// Failing because the proposing account doesn't have sufiscient balance for the deposit amount
const testFailureInsufiscientBalance = (() : unit => {
    const [tok, dao, sender_] = bootstrap();

    // Burn all the sender tokens
    const burn_addr = "tz1ZZZZZZZZZZZZZZZZZZZZZZZZZZZZNkiRg" as address;
    const _ = Token_helper.transfer(tok.contr, sender_, burn_addr, initTokAmount);
    const r = DAO_helper.propose(DAO_helper.dummyProposal, dao.contr);

    Token_helper.assertInsBalanceFailure(r);
})();
